using System;


namespace Chess.Model.Logic
{
  #region ZobristValues

  /// <summary>
  /// Class holding two arrays of values used for Zobrist hashing when generating a board hash value.
  /// </summary>
  class ZobristValues
  {
    /// <summary>
    /// Array containing 1557 random integers used for computing the board hash key using Zobrist hashing.
    /// </summary>
    public static readonly int[] Keys = new int[]
        {
          // 12 * 64 (actual 12 * 128 due to 0x88 board scheme) numbers - each random number coresponds to a piece type and to a square on a 0x88 scheme board
				  -1524316581, 1447583997, 1080234973, -113422222, 1260335528, -1765674241, -1745612872, -1244944311, 0, 0, 0, 0, 0, 0, 0, 0, -1841125075, -141203262, 408458582, 199365960, 629124811, 1783272833, 780737736, -1418883045, 0, 0, 0, 0, 0, 0, 0, 0, 1019477476, 1087462193, 283982325, -1756688989, -1319162096, 866783698, 1888751701, 951986254, 0, 0, 0, 0, 0, 0, 0, 0, 1097476127, 1903370594, -1431318483, 1937420312, 2032471565, -1290537839, -606563564, -397365471, 0, 0, 0, 0, 0, 0, 0, 0, 2133415580, 114329004, 1948242138, -1347689634, 1819860499, -6409052, 1078938301, -970357870, 0, 0, 0, 0, 0, 0, 0, 0, 496923641, 2049502197, 434720734, 1283906395, -702426813, -1674853042, -360057390, -752245852, 0, 0, 0, 0, 0, 0, 0, 0, -1442224591, 694026666, 684668011, -739731737, 1974738705, -1898442462, 184456715, 647139922, 0, 0, 0, 0, 0, 0, 0, 0, -1913083856, -1281885084, 1359392636, -635007113, 2061510259, 550822581, 157733956, 1977956106, 0, 0, 0, 0, 0, 0, 0, 0, 
				  177631644, 1421611229, 972864339, -1292943432, -503050874, 1926021633, -97104919, 644154994, 0, 0, 0, 0, 0, 0, 0, 0, 861727692, 1929907690, 843478827, -845841918, 1309532388, -776792082, -1295397929, 1254638820, 0, 0, 0, 0, 0, 0, 0, 0, 1882368286, -323809343, 1946940557, 1540199865, -167466614, 1008213729, 1013034435, -40763289, 0, 0, 0, 0, 0, 0, 0, 0, -789045948, 1725130476, -2017241339, 998501408, -1250299877, 2119833706, 1650230741, -1650272502, 0, 0, 0, 0, 0, 0, 0, 0, 1529974245, -1134478997, 458656068, 1829385405, -1916556264, -879664383, 380251164, 1785101376, 0, 0, 0, 0, 0, 0, 0, 0, 515395175, 609904771, -722710384, 305315634, 1205444460, -1132982346, 1540391060, -2130797586, 0, 0, 0, 0, 0, 0, 0, 0, -980909451, -1339772620, 778648127, 820388780, -1387562155, 1226872507, 51160732, -556399234, 0, 0, 0, 0, 0, 0, 0, 0, -1133341336, 2048794347, 1431571586, -1627466927, -1445632676, 982681879, -1422857728, 2103562804, 0, 0, 0, 0, 0, 0, 0, 0, 
				  313049074, -1526354726, 931289727, 765240784, 824842095, -985855511, 1179304836, -900382442, 0, 0, 0, 0, 0, 0, 0, 0, -978243361, 42640159, 1222183287, 989385959, -1325536794, -2111420749, 1164922359, 1105315443, 0, 0, 0, 0, 0, 0, 0, 0, 272581099, 1407829249, 1259849805, 195431447, 1958187655, -1327641418, 438482975, 91975710, 0, 0, 0, 0, 0, 0, 0, 0, -1430037031, -93253768, -610763754, 1718362631, -1764288170, -396677952, 411594502, -1497835872, 0, 0, 0, 0, 0, 0, 0, 0, -1271383454, -221469026, -1471575356, 1454357418, -1958313369, -1153742260, 798156302, 1265571634, 0, 0, 0, 0, 0, 0, 0, 0, -2124000008, -1313158926, 1803121536, 123394488, 862931249, 1975649377, 584990186, 346215227, 0, 0, 0, 0, 0, 0, 0, 0, -35683897, -2078456535, -911947779, -1389620012, -1109084532, 1605766837, 2132857926, -1684062349, 0, 0, 0, 0, 0, 0, 0, 0, 704212124, -886281301, -1003853204, -1420312552, -128302781, 2030046998, -1627246459, -1559068684, 0, 0, 0, 0, 0, 0, 0, 0, 
				  -1086098850, 1800463274, 2003540382, -1427655863, 8089019, 1787363174, 230435694, -1295573931, 0, 0, 0, 0, 0, 0, 0, 0, 1536515546, -733337570, 593836137, -784805977, 978862072, -58482931, 1611401403, -494862033, 0, 0, 0, 0, 0, 0, 0, 0, -685093511, 239834474, -229235836, 2121201809, 924385744, -1153280102, -1108992286, 1352228870, 0, 0, 0, 0, 0, 0, 0, 0, 1939914179, 1009449206, -1430953807, -2031843441, 727760752, -1715086903, -1020303000, -1166117495, 0, 0, 0, 0, 0, 0, 0, 0, 843672051, -1021349486, -705110340, 751479953, -24672671, 1603530129, -179049657, -325303448, 0, 0, 0, 0, 0, 0, 0, 0, 1291046742, 31512781, 2129173342, -1808806648, -1243211118, -2040014095, -1569993768, -752606849, 0, 0, 0, 0, 0, 0, 0, 0, 1237612202, 969130713, 840003719, -625731277, -297851259, 1604182955, -1722589973, -1722203087, 0, 0, 0, 0, 0, 0, 0, 0, 40864098, 216701672, -1572199766, -1182744070, 1033763371, -7137320, 782752283, -976408410, 0, 0, 0, 0, 0, 0, 0, 0, 
				  -355304525, 1247461532, -150356144, -424988798, 249393687, 264218935, 1556790743, 2078834377, 0, 0, 0, 0, 0, 0, 0, 0, 911345943, 1969687836, -396751723, 2043440728, 953585914, -1527626190, 94743118, 481879165, 0, 0, 0, 0, 0, 0, 0, 0, -1781605921, 2115221558, -446791819, -1605401404, -25105591, 2043267993, -339828366, -420874904, 0, 0, 0, 0, 0, 0, 0, 0, -1583541700, 1455182658, -1066207477, -1161951203, -239416204, -1384101053, 531254991, -1094423189, 0, 0, 0, 0, 0, 0, 0, 0, -432485815, -1884520393, 1518026298, 1249649595, 826338793, -1094793794, -711644467, -293736541, 0, 0, 0, 0, 0, 0, 0, 0, 718073812, -2036536889, -1098987309, -490715766, 1031012479, -1347800487, -147898717, 1745695220, 0, 0, 0, 0, 0, 0, 0, 0, -80595829, 225348971, 2074548307, 177456508, 1356013602, 1819640587, -909198884, 1183714892, 0, 0, 0, 0, 0, 0, 0, 0, 320160090, -440817263, -1210824267, -891203711, -364063582, -480298232, 1291300852, -1378931112, 0, 0, 0, 0, 0, 0, 0, 0, 
				  94526049, 1288620526, 1160256971, 1362419848, -1802170520, 428033610, -311226492, 1015898009, 0, 0, 0, 0, 0, 0, 0, 0, -1183630957, -1660218745, 5693066, -2009371115, 1309356915, 1268469086, -576749611, 1948106800, 0, 0, 0, 0, 0, 0, 0, 0, -696905373, 1278943800, -651597969, 1988520579, 879680338, 1044424740, 1029826008, 137875891, 0, 0, 0, 0, 0, 0, 0, 0, -1091009138, 114533142, -1904019315, -374135401, 160194594, -1496694220, 1687702078, -1231760014, 0, 0, 0, 0, 0, 0, 0, 0, 1143989725, 473729101, 2133269405, 586679665, -505469649, 1321085481, -2158870, -1887877494, 0, 0, 0, 0, 0, 0, 0, 0, -1785854347, -1024115675, -912242917, -182723530, 1065676722, -726922228, -1175936837, 2118737786, 0, 0, 0, 0, 0, 0, 0, 0, 1695514921, -1269705308, -1394323783, 1261031907, 802824577, 439324625, 4563453, -1193267222, 0, 0, 0, 0, 0, 0, 0, 0, 778006827, 1745639683, 370663013, -2010635194, 306050888, 2100704938, -1549342612, -1630030363, 0, 0, 0, 0, 0, 0, 0, 0, 
				  -30008386, -1825354154, -473454424, 194463898, -908103161, 531904433, -563987904, 1514176627, 0, 0, 0, 0, 0, 0, 0, 0, -1037734142, 1502674112, -1006354163, -1261722287, -405878738, -235000705, -1313240234, -1560368986, 0, 0, 0, 0, 0, 0, 0, 0, 2120986526, 1872748404, 1470363113, 91064091, 1860926285, -757947502, 1512610212, -1724172945, 0, 0, 0, 0, 0, 0, 0, 0, -1735779688, -1012017555, -1098291908, 1042088934, -574461547, 1474733497, -1111825199, -1353636238, 0, 0, 0, 0, 0, 0, 0, 0, -649002391, 1482690440, 702185627, -594563639, 71339619, 1554587657, 1842223274, -285873711, 0, 0, 0, 0, 0, 0, 0, 0, -1552338814, -703555077, -346746311, 1398533946, -1643759891, -1888885375, -2132888784, 466839377, 0, 0, 0, 0, 0, 0, 0, 0, 2020094273, 1807256545, -1219235079, 1323898521, -1588698200, -1315599280, 954896052, 2030065274, 0, 0, 0, 0, 0, 0, 0, 0, 1888480167, 2087054795, -1346541359, 1350076634, 931511927, -529346485, -1456911633, 1739674018, 0, 0, 0, 0, 0, 0, 0, 0, 
				  -1604653809, -2054980320, 1293174097, 779685434, -1179985327, -1836247495, 1005314454, -804090412, 0, 0, 0, 0, 0, 0, 0, 0, -265361876, 1702496362, -807066631, -611772146, 2006015214, 398536056, -1169203737, -1228038347, 0, 0, 0, 0, 0, 0, 0, 0, -1842231676, -1717112210, 1354484965, 475824096, 843611197, 1722923318, 387410345, 1617741494, 0, 0, 0, 0, 0, 0, 0, 0, 1067097214, 288880251, -1743541686, -665118862, -1131985662, -775083506, 704773313, 832068505, 0, 0, 0, 0, 0, 0, 0, 0, 1085534047, -1365059885, 654623017, -1174776935, -1791546730, -1813464600, -135974711, -1556509738, 0, 0, 0, 0, 0, 0, 0, 0, 1861426394, -428433886, 480776143, -694085763, 1325778575, -226636238, -621366701, -80397485, 0, 0, 0, 0, 0, 0, 0, 0, -1401197698, -94918565, 1072692488, 52637330, 1120274944, -1692961374, 1564100918, 1757264716, 0, 0, 0, 0, 0, 0, 0, 0, 702034146, -247547109, 1003204098, -2077036434, 852017933, -1983605739, -1366315927, -395028621, 0, 0, 0, 0, 0, 0, 0, 0, 
				  -836928085, -1467570027, -1483884619, -643054003, -1786122026, -2048844208, -345536169, -1195532534, 0, 0, 0, 0, 0, 0, 0, 0, -214091714, 541390582, -266787137, -556252765, -1383041607, -136772366, -619718741, -255312778, 0, 0, 0, 0, 0, 0, 0, 0, -1024939964, 2136771681, 623748407, 216781509, -563766662, 1374859228, -2056556092, 848983988, 0, 0, 0, 0, 0, 0, 0, 0, 1704861193, 616658523, 1537445266, -1010425353, -1845238622, 1735306007, 430947073, -785866829, 0, 0, 0, 0, 0, 0, 0, 0, -698976056, -183351250, -2026065257, -758195384, -456672248, -998263027, -1987007944, 1681692250, 0, 0, 0, 0, 0, 0, 0, 0, -198898067, -762404865, -752712220, 1798961121, -1552807184, 1612338209, -1198578392, 1850851281, 0, 0, 0, 0, 0, 0, 0, 0, 203578360, -1497422864, -685393976, 1105566682, 1990950211, 236189922, -2129703205, -1930503913, 0, 0, 0, 0, 0, 0, 0, 0, 342596726, 237104497, 1708350374, 1811522710, 1208443988, 524463745, 420584785, 376596217, 0, 0, 0, 0, 0, 0, 0, 0, 
				  -703708241, 1221247232, 1157398278, -1976386058, 194541036, -174590229, 1473744330, 62237824, 0, 0, 0, 0, 0, 0, 0, 0, -583723214, -404346352, 1691158095, 679628340, 1294068882, 2135674283, 394732961, 1398837058, 0, 0, 0, 0, 0, 0, 0, 0, 812371344, 426661153, -511836173, 180502846, 1392107215, -1083781966, 593219807, -1810264765, 0, 0, 0, 0, 0, 0, 0, 0, -76656044, -1075598569, 1754389601, -1132218852, 78139614, -1882314761, 496866987, 1032452041, 0, 0, 0, 0, 0, 0, 0, 0, 1839113252, 898856956, 241930574, 1455371253, -93934239, 732945195, 1636229963, -990032167, 0, 0, 0, 0, 0, 0, 0, 0, -698116301, 469844064, 518129983, -225308307, -575561423, 1293795631, -1166772806, -1508155763, 0, 0, 0, 0, 0, 0, 0, 0, 2072434745, 926254103, 1348921098, -297921687, 1396852360, -52213467, 1813565903, -642433643, 0, 0, 0, 0, 0, 0, 0, 0, 795446741, 98384564, -960041886, -230166151, 117067661, -1337886288, 1691474239, -662830141, 0, 0, 0, 0, 0, 0, 0, 0, 
				  1186135133, 808803855, -1282974176, 1992337021, -1297900341, -440624282, -1200475894, -747261637, 0, 0, 0, 0, 0, 0, 0, 0, -1800531204, 78394168, -1433101067, -1149663032, -105319684, -133776181, -706414419, -1842362873, 0, 0, 0, 0, 0, 0, 0, 0, -730649134, 21447219, 1737143685, -880904459, 843686909, 1898111918, -901834770, 1533431650, 0, 0, 0, 0, 0, 0, 0, 0, -1885735079, -293401826, -503136176, -1424314838, -1768544548, -1195424453, -605412147, 94884825, 0, 0, 0, 0, 0, 0, 0, 0, 1536095023, 541485227, 1143762377, 587437486, 396496190, 1782029255, -708998880, 1975624576, 0, 0, 0, 0, 0, 0, 0, 0, 953882203, -1125156606, 58070481, -312185846, 65450021, -1421781078, -293748706, 1598329919, 0, 0, 0, 0, 0, 0, 0, 0, -1349684145, -340456261, 564030207, -2103062982, -573351275, 17577400, -550052013, -17509108, 0, 0, 0, 0, 0, 0, 0, 0, -250687230, 2136745408, 3772383, 888357550, 1460600064, -1792744661, -430122233, -17609345, 0, 0, 0, 0, 0, 0, 0, 0, 
				  -571289480, 786331599, 1080139134, -583257687, -1226338784, 1119758030, -1410711880, 2143483147, 0, 0, 0, 0, 0, 0, 0, 0, -1424913779, -1407628302, 2095982375, -1858469187, -63326337, -1963416090, -29975960, -1751193188, 0, 0, 0, 0, 0, 0, 0, 0, -2111918083, -2057194594, -649451142, -1415293666, 1612362519, 344638894, -1576984787, -844577516, 0, 0, 0, 0, 0, 0, 0, 0, -2146917864, -423909367, -1816460955, 510236970, 208802148, 1841472303, 883159629, -1248669278, 0, 0, 0, 0, 0, 0, 0, 0, -1487615297, 111592270, -2068958125, 127699788, 1806021906, 780733272, -1830196997, -1370923838, 0, 0, 0, 0, 0, 0, 0, 0, -1535556649, 569162276, -1977814122, 1975252007, 1196088376, -421462177, 566205456, 815919173, 0, 0, 0, 0, 0, 0, 0, 0, -1756914548, -1719799551, -700738577, -1707940170, 887893940, 1845235693, 1138747570, -861223889, 0, 0, 0, 0, 0, 0, 0, 0, -762466439, -1459415623, 1592982562, 1141768470, 1795244002, -655781802, -1091756651, -598514208, 0, 0, 0, 0, 0, 0, 0, 0, 
          // corresponds to white turn
          2124577889,
          // for each castling capability
          -198206601, 1922583806, -621585070, -1581191372, 
          // 16 numbers - match the squares that could be en passant targets
          687625965, 1020917476, 1421696375, 1460622068, 602185924, 1454755990, 243928570, -398994059, -1658010412, 1948296689, -1907511966, -415845959, -930244183, 187597280, -621909151, 1218280562,
        };

    /// <summary>
    /// Array containing 1557 random integers used for computing the board hash lock using Zobrist hashing.
    /// </summary>
    public static readonly int[] Locks = new int[]
        {
          // 12 * 64 (actual 12 * 128 due to 0x88 board scheme) numbers - each random number coresponds to a piece type and to a square on a 0x88 scheme board
          -1895586180, -1703246814, 51279626, 845161641, 2144833760, -1830280122, -60522410, 743019474, 0, 0, 0, 0, 0, 0, 0, 0, -143430908, -1978071996, -1018513023, 1047412202, 1351185907, -1673205274, 1972805550, 893726034, 0, 0, 0, 0, 0, 0, 0, 0, 1855870162, -767474307, 266782398, 1623921217, -983121737, -427655132, -1949287622, 735332228, 0, 0, 0, 0, 0, 0, 0, 0, -589383862, -1216042473, 1749425114, -1195960991, -948273049, -804214187, 1704292971, -13568052, 0, 0, 0, 0, 0, 0, 0, 0, 1720082912, -244298389, 1681076523, -2048987523, 47557525, 761522708, 85483143, -31284697, 0, 0, 0, 0, 0, 0, 0, 0, 1456118830, 1144446939, -210284770, -2049657877, -2025672605, -1453501806, -1614894527, 1288017401, 0, 0, 0, 0, 0, 0, 0, 0, 681808151, 1471867791, -871476557, 1626585233, -1336031108, -1257405910, -682127800, -1296964762, 0, 0, 0, 0, 0, 0, 0, 0, 1838873448, 698677029, -114367551, -508221756, -276506551, -1255667156, 1182710113, 404394964, 0, 0, 0, 0, 0, 0, 0, 0, 
          1992711511, -1788812316, 678560999, -1511418060, 1033925573, 1546723111, 478840339, 1877575504, 0, 0, 0, 0, 0, 0, 0, 0, -235545290, -852718102, 917931973, 1757423343, 1348410500, -1494100296, -493292614, -1065429124, 0, 0, 0, 0, 0, 0, 0, 0, 939841662, -770951985, -1231495505, -266766904, 1204868807, 157340236, -2026541663, 1652479971, 0, 0, 0, 0, 0, 0, 0, 0, 101986872, -2060504837, -652161521, 1807983841, 1427275765, -1175407684, -1061544854, 1361350099, 0, 0, 0, 0, 0, 0, 0, 0, 2125845875, -73690126, 662526043, 2068836576, 241406999, -1988706147, 2086895000, -1524452661, 0, 0, 0, 0, 0, 0, 0, 0, 1983034801, 937410950, -1564997572, -1326473617, 1018473543, -365120218, 1892706188, -369167100, 0, 0, 0, 0, 0, 0, 0, 0, 1777651511, -1239697618, 1568483489, -327986127, -181465793, 433129211, 1664564807, 1956548566, 0, 0, 0, 0, 0, 0, 0, 0, 1008332628, 1502462364, 1682092929, -138392895, 389098009, -928876706, 1867542953, -1717176171, 0, 0, 0, 0, 0, 0, 0, 0, 
          1200322698, -296246146, 1447149529, 285237043, 175601999, -209008102, -2105247347, -2064456845, 0, 0, 0, 0, 0, 0, 0, 0, -1213410791, -1985344882, -1721258313, 1198239290, 463040527, 2069355672, -923736669, 296748042, 0, 0, 0, 0, 0, 0, 0, 0, 1028413601, 29832669, 1585323688, 1588246383, -1183933753, 382354726, -761868111, -1777189270, 0, 0, 0, 0, 0, 0, 0, 0, 722662570, -574123195, 1384781481, -1738878956, -57618282, -1022421054, -1291610599, 1354168410, 0, 0, 0, 0, 0, 0, 0, 0, -623855560, -2085961493, -66485578, -1846547318, 36445211, 1387085289, -1576339293, 44907193, 0, 0, 0, 0, 0, 0, 0, 0, 2022522675, 206185151, 113812596, -1869008890, 1676563933, -351088959, 1596149581, -650723058, 0, 0, 0, 0, 0, 0, 0, 0, 17872522, -137633773, -1380507252, -226294190, -2092909326, 206406145, 2054039131, 1960256683, 0, 0, 0, 0, 0, 0, 0, 0, -1592047296, 2067365850, -1297687818, 1521337259, 1528659782, -1308207819, 1304660648, -1293657869, 0, 0, 0, 0, 0, 0, 0, 0, 
          1539771817, -331344856, 299116190, -2058515480, 1550281720, -1333821646, 1994974185, 1975700988, 0, 0, 0, 0, 0, 0, 0, 0, 975430951, 503805553, -1873442949, -529856616, 1520834903, 130506948, 1779176993, 2057219609, 0, 0, 0, 0, 0, 0, 0, 0, 685625170, 1949482083, -1058316725, 1469235773, 1967333786, 112236613, -888583095, -722468336, 0, 0, 0, 0, 0, 0, 0, 0, -375487677, -450334284, 1394372560, -664644410, 1177167892, 1308299516, 402717159, -1450928167, 0, 0, 0, 0, 0, 0, 0, 0, 1229536223, 1743871681, -725240198, 1376069280, -1408468514, -2045417473, 1023451753, -1201851989, 0, 0, 0, 0, 0, 0, 0, 0, -992690213, -801314560, -497678321, 947842294, -1298641679, -1317330381, 2117790039, -656106027, 0, 0, 0, 0, 0, 0, 0, 0, 1681299820, 1076363051, 1642936018, -276180956, -1792719828, -1313455147, 1677940078, -1528115345, 0, 0, 0, 0, 0, 0, 0, 0, 1334025080, 1886234728, 80398686, 104590800, 191248139, 880530070, 311355984, 1874002295, 0, 0, 0, 0, 0, 0, 0, 0, 
          936359990, -1354882436, 1442561579, -786058480, 1000388491, -1112635357, -169324457, 1726778482, 0, 0, 0, 0, 0, 0, 0, 0, 17283290, 1483381867, 999043398, -1005221857, -1552860342, -1705728167, -1957733811, 582928972, 0, 0, 0, 0, 0, 0, 0, 0, -1026990593, -1013030203, 568547012, 1510648974, 240730188, 273242868, -1727904925, 1724915815, 0, 0, 0, 0, 0, 0, 0, 0, 907341930, 1310041917, 1370247757, 1819114278, -2102058723, -2108107569, 1894114810, 491659815, 0, 0, 0, 0, 0, 0, 0, 0, -1471584276, -864662137, 132905548, -954148866, -1148438145, 850271183, -1256715444, -1407821916, 0, 0, 0, 0, 0, 0, 0, 0, -1752174261, -248957323, 1933781120, -1863809738, 971150481, 763568075, 54007162, 135034587, 0, 0, 0, 0, 0, 0, 0, 0, 1092664934, 849268459, -1643243236, 1059890487, -551168979, 798798017, -2080213388, 297169884, 0, 0, 0, 0, 0, 0, 0, 0, 1106300976, 508264539, -1528285554, 117751625, 309735418, 702876505, 245067256, 2096128691, 0, 0, 0, 0, 0, 0, 0, 0, 
          1466681527, 469537359, -2130067957, 1696679030, 1600525286, 2048730637, -2131862090, -311259931, 0, 0, 0, 0, 0, 0, 0, 0, -1309458638, 1243090438, -889429285, 1230169057, 251442142, 1392107995, 1495495968, 1801122987, 0, 0, 0, 0, 0, 0, 0, 0, -1358744667, 449333760, 1934858270, -1287621647, -1366473567, 1928141042, -137996859, -704029376, 0, 0, 0, 0, 0, 0, 0, 0, 309412537, -1511785688, 1656634302, -1008798686, -1156614812, -636079532, -461354152, -205789464, 0, 0, 0, 0, 0, 0, 0, 0, 696611381, -1415130395, 1645944332, -926863876, -353224127, -2066831945, 1120678155, -915424232, 0, 0, 0, 0, 0, 0, 0, 0, -1604314920, 713158228, -1021827776, -289777228, -39255016, 684298354, -921052331, 938968327, 0, 0, 0, 0, 0, 0, 0, 0, 748673293, -481423449, 223713468, -863480288, 1209257780, -398481011, 890958534, 1592151466, 0, 0, 0, 0, 0, 0, 0, 0, 648175689, 364892391, -2108433684, 192567699, 1960025529, -1044553378, 2081015702, -978758097, 0, 0, 0, 0, 0, 0, 0, 0, 
          -1051283282, 1333776879, -1718194431, -536368461, -166686740, -297600182, 650936844, -1804962948, 0, 0, 0, 0, 0, 0, 0, 0, 439319964, 1870566307, -1101005592, 731415265, 521177868, 223135864, 723151254, -1905533720, 0, 0, 0, 0, 0, 0, 0, 0, -780700816, -762583064, -1887538926, 1533769798, 1487112789, -1411984037, 548814967, 1143740329, 0, 0, 0, 0, 0, 0, 0, 0, 1209213259, -1322636585, 832522861, 2081287846, -643051378, -2033238367, 656610616, -1260942681, 0, 0, 0, 0, 0, 0, 0, 0, 1263526030, -629151700, -2008295118, -1372851229, -193531624, 1705425583, 95797166, 1500926824, 0, 0, 0, 0, 0, 0, 0, 0, 1837973235, 295291296, -2073854451, -1968613045, -1577350668, -1020924166, 1299464161, 1259302237, 0, 0, 0, 0, 0, 0, 0, 0, 1414823072, -1970815198, 301047136, -1475819532, -706279294, 160182659, -375761433, -1595188560, 0, 0, 0, 0, 0, 0, 0, 0, -2078075558, 1193474920, -884056254, -1138792200, 1970302172, -1857398609, 1267546888, -102120572, 0, 0, 0, 0, 0, 0, 0, 0, 
          842834861, 1305384058, 1968709783, -1437415546, -1705652632, 85225090, -1391636778, -471236017, 0, 0, 0, 0, 0, 0, 0, 0, -1771376075, -525428283, -1603814017, 1571192635, -1355512486, 1082048519, -146559746, -1948162614, 0, 0, 0, 0, 0, 0, 0, 0, 1966414927, 35034546, -203180305, 1177267552, -1004843789, 64453120, 384213204, 467553465, 0, 0, 0, 0, 0, 0, 0, 0, 1458401883, 1165321705, 391402755, 87395964, -1973951356, -540947297, 1661494905, -1834938790, 0, 0, 0, 0, 0, 0, 0, 0, -1573870127, 186387669, 1055709086, -2013089650, 992646567, 2147328337, -1572227015, 561171571, 0, 0, 0, 0, 0, 0, 0, 0, 1791555134, -1207974650, 1668767338, 1545529145, 529060361, -1299117030, -1305265133, -1968004520, 0, 0, 0, 0, 0, 0, 0, 0, -1672004897, 83120683, -947085579, -1971333101, 1923006301, -252469849, 1245071047, 1928895008, 0, 0, 0, 0, 0, 0, 0, 0, -1946311359, 65529694, -1858031660, -1497763542, -897731339, -246120089, -194017901, 767382162, 0, 0, 0, 0, 0, 0, 0, 0, 
          -1370375282, 719832730, 1978564789, -1422437309, 378640528, -729908435, -450576352, -1623911790, 0, 0, 0, 0, 0, 0, 0, 0, -1047468459, 44353310, 1402136674, 375773116, 1842609642, -1338188681, 1593736576, -1918732707, 0, 0, 0, 0, 0, 0, 0, 0, 472775895, 2125098618, -1270692904, -81184739, -1043954400, 1080364395, -599599269, 420247577, 0, 0, 0, 0, 0, 0, 0, 0, -2135943989, -1326844460, 2125555315, 270327169, -1685234095, 684211480, -1282030173, 505445540, 0, 0, 0, 0, 0, 0, 0, 0, -1471458635, -2103317033, 219923921, -1562809123, -1305666413, 2089886321, 1576118843, 1890381574, 0, 0, 0, 0, 0, 0, 0, 0, -939532827, -1493736758, 417659372, -1922509655, -457162481, -1793797041, 865346050, 191545982, 0, 0, 0, 0, 0, 0, 0, 0, 1755869329, -1291348983, 1113320875, -480268523, 144776236, -1796467636, -1986106064, 1432740489, 0, 0, 0, 0, 0, 0, 0, 0, 634437607, 1826735208, -593987104, -363960974, 1201784751, 1413407868, 646050910, 780048520, 0, 0, 0, 0, 0, 0, 0, 0, 
          526714820, 1679919767, 616583815, -1807618156, 157727714, 1888858628, 1315098319, -853128393, 0, 0, 0, 0, 0, 0, 0, 0, 1978466088, 258919757, 1930632434, -509727087, 2082266725, -568487406, 1431236654, 1197528772, 0, 0, 0, 0, 0, 0, 0, 0, -1048885014, 880579690, 1597069244, 1308201126, 250621590, -486306222, -877919342, 1339761652, 0, 0, 0, 0, 0, 0, 0, 0, -558437836, 1272702194, 410531996, 2060117272, -476445052, -1342591716, 1699105661, 958618939, 0, 0, 0, 0, 0, 0, 0, 0, -600111948, 1834808121, 1782119096, -2025555164, -708294618, -703968364, -1208689477, -258655670, 0, 0, 0, 0, 0, 0, 0, 0, -1591694651, -1290800466, -251365338, -1212276134, 40567946, 523488876, -960257632, 962706173, 0, 0, 0, 0, 0, 0, 0, 0, -625744323, -343718086, 2087910656, -1051934163, -60195596, -68744201, 1268973852, 1917996944, 0, 0, 0, 0, 0, 0, 0, 0, -284689094, 388400158, 815063038, -529778497, -1201258017, 1321328799, 1477189233, 862842761, 0, 0, 0, 0, 0, 0, 0, 0, 
          929369041, -1868008502, 1369662617, 366604583, -977467281, 1432773951, -351745761, 2101936237, 0, 0, 0, 0, 0, 0, 0, 0, 130863619, 769035392, -1087189809, 1624662342, -1322867543, 1558094471, 804019752, -1375537785, 0, 0, 0, 0, 0, 0, 0, 0, 734242687, -1884055035, 1993323245, -1688369026, 668955535, 839720589, 180359088, 1975359875, 0, 0, 0, 0, 0, 0, 0, 0, 656929086, -1749878561, -202795286, 292998489, 934547930, -180659547, -236176005, 809809989, 0, 0, 0, 0, 0, 0, 0, 0, -1357502960, 67520844, -809764320, -628363898, 72055504, -1403225623, -453281364, 979735837, 0, 0, 0, 0, 0, 0, 0, 0, 336219866, 819599891, -1716280719, 1033053279, -543041061, 2070182941, -233810316, 401726260, 0, 0, 0, 0, 0, 0, 0, 0, -112244075, -1019486636, 1807977763, -1992641642, -218761411, 1792192846, -1682403280, -1330569377, 0, 0, 0, 0, 0, 0, 0, 0, 1875661381, 869346654, -217959362, 89994579, 1311355754, -1120148800, -1321989719, -1630067096, 0, 0, 0, 0, 0, 0, 0, 0, 
          1876890514, 52891670, 375669763, -1934358464, 1058014167, -1885616688, 2014063877, 261177804, 0, 0, 0, 0, 0, 0, 0, 0, -917118570, -1557231940, 1760939493, -1560920573, -1090934362, 819561592, -1339504870, -237734007, 0, 0, 0, 0, 0, 0, 0, 0, 403417703, -342255289, 74971074, 1311205415, 946415797, -422473323, 1114782502, -1979633298, 0, 0, 0, 0, 0, 0, 0, 0, 10245603, 1939925100, 2080689578, -2123280805, -210908768, 328901708, 176740543, 832028626, 0, 0, 0, 0, 0, 0, 0, 0, -1169625814, 1426861861, -619135840, -340207240, 1219585992, 701587549, 646249097, 292029674, 0, 0, 0, 0, 0, 0, 0, 0, 1488607104, 1526308750, 1490640163, -942601256, -79659043, -1847148824, 1729315243, 702618700, 0, 0, 0, 0, 0, 0, 0, 0, 13268179, 1935941024, 1127820445, 1878312438, 364763246, -1866579611, -1427959845, -161919000, 0, 0, 0, 0, 0, 0, 0, 0, 501533464, -1861273201, -1018979005, -431776035, -67208248, 1878948639, 650938688, -1424553667, 0, 0, 0, 0, 0, 0, 0, 0, 
          // corresponds to white turn
          -1333388146,
          // for each castling capability
          448287276, 1202127040, -773885451, -150174348, 
          // 16 numbers - match the squares that could be en passant targets
          167059760, -204286375, 647686553, 915468001, -341767538, 1293640583, 111862010, 108089465, -1187935450, 418517267, -2131199205, -412134330, 170712665, -22226065, -1070811164, 1821752797,
        };

    /// <summary>
    /// Ensures that the compiler does not creates a default public constructor.
    /// </summary>
    private ZobristValues()
    { }
  }

  #endregion


  /// <summary>
  /// Represents a 64 bit hash value with a 32 bit interface for a chess position. 64 bit is not enough to
  /// enumerate every chess position, there will exist the possibility of a signature collision, but in practice
  /// this is rare enough that it can be ignored, as long as we make sure we don't actually crash on a collision.
  /// 
  /// A nice thing with a Zobrist hash is that the key can be managed incrementally. If, for example, one have
  /// a white pawn on e5, the key has had "zobrist[WHITE_PAWN][E5]" XOR'd into it. If one XOR this value into
  /// the key again, due to the way that XOR works, the pawn is deleted from the key. What this means is that
  /// if one have a key for the current position, and want to move a white pawn from e5 to e6, one can simply
  /// XOR in the "white pawn on e5" key, which removes the pawn from e5, and XOR in the "white pawn on e6" key,
  /// which puts a white pawn on e6. One can be guaranteed to get the same key as if one started over and XOR'd
  /// all of the keys for all of the pieces together.
  /// 
  /// Examples of uses for a Zobrist Hash
  /// - Keep a stack of prior game state hashes to look for repeats.
  ///   Much smaller than saving the game states themselves. (Threefold repetition rule)
  /// - Quickly look-up historical calculations for previously seen board states.
  ///   Prevent a large cyclical repeating pattern. (Transposition Table)
  /// - Creation of an opening book.
  /// </summary>
  class ZobristHash
  {
    /// <summary>
    /// The 32 bit key part of the Zobrist hash.
    /// </summary>
    private int m_key;

    /// <summary>
    /// The 32 bit lock part of the Zobrist hash.
    /// </summary>
    private int m_lock;


    /// <summary>
    /// Initializes a new instance of a Zobrist hash with a value corrosponding to "board".
    /// </summary>
    /// <param name="board">The board the zobrist hash will be created for.</param>
    public ZobristHash(Board board)
    {
      HashSet(board);
    }

    /// <summary>
    /// Initializes a new instance of a Zobrist hash with the key and lock values.
    /// </summary>
    /// <param name="keyPart">Hash value for the key.</param>
    /// <param name="lockPart">Hash value for the lock</param>
    public ZobristHash(int keyPart, int lockPart)
    {
      m_key = keyPart;
      m_lock = lockPart;
    }

    /// <summary>
    /// Initializes a new instance of a Zobrist hash identical in value to the passed Zobrist hash.
    /// </summary>
    /// <param name="zobristHash">The ZobristHash to clone.</param>
    public ZobristHash(ZobristHash zobristHash)
    {
      m_key = zobristHash.m_key;
      m_lock = zobristHash.m_lock;
    }

    /// <summary>
    /// Gets or sets the key part of the Zobrist hash.
    /// </summary>
    public int Key
    {
      get { return m_key; }
      set { m_key = value; }
    }

    /// <summary>
    /// Gets or sets the lock part of the Zobrist hash.
    /// </summary>
    public int Lock
    {
      get { return m_lock; }
      set { m_lock = value; }
    }

    /// <summary>
    /// XOR the key and lock to return a 32 bit integer representing the hashcode for the Zobrist hash.
    /// </summary>
    /// <returns></returns>
    public override int GetHashCode()
    {
      return m_key ^ m_lock;
    }

    /// <summary>
    /// Compares this instance of a zobrist hash to a given object.
    /// </summary>
    /// <param name="obj">The object to compare this instance to.</param>
    /// <returns>Returns true if the two instances are equal.</returns>
    public override bool Equals(object obj)
    {
      ZobristHash hash = (ZobristHash)obj;

      if (hash == null)
        return false;
      else
        return (m_key == hash.m_key && m_lock == hash.m_lock);
    }

    /// <summary>
    /// Sets the hash value according to a board.
    /// </summary>
    /// <param name="board">The board a hash value will be generated for.</param>
    public void HashSet(Board board)
    {
      m_key = 0;
      m_lock = 0;

      if (board != null)
      {
        foreach (Square square in board)
        {
          if (board[square] != Piece.None)
          {
            m_key ^= ZobristValues.Keys[((int)board[square] * 128) + (int)square];
            m_lock ^= ZobristValues.Locks[((int)board[square] * 128) + (int)square];
          }
        }

        if (board.State.ColorToPlay == PieceColor.White)
        {
          m_key ^= ZobristValues.Keys[1536];
          m_lock ^= ZobristValues.Locks[1536];
        }

        if (board.State.WhiteCanCastleLong)
        {
          m_key ^= ZobristValues.Keys[1537];
          m_lock ^= ZobristValues.Locks[1537];
        }

        if (board.State.WhiteCanCastleShort)
        {
          m_key ^= ZobristValues.Keys[1538];
          m_lock ^= ZobristValues.Locks[1538];
        }

        if (board.State.BlackCanCastleLong)
        {
          m_key ^= ZobristValues.Keys[1539];
          m_lock ^= ZobristValues.Locks[1539];
        }

        if (board.State.BlackCanCastleShort)
        {
          m_key ^= ZobristValues.Keys[1540];
          m_lock ^= ZobristValues.Locks[1540];
        }


        if (board.State.EnPassantTarget != Square.None)
        {
          if (Board.Rank(board.State.EnPassantTarget) == 3)
          {
            m_key ^= ZobristValues.Keys[1541 + Board.File(board.State.EnPassantTarget)];
            m_lock ^= ZobristValues.Locks[1541 + Board.File(board.State.EnPassantTarget)];
          }

          if (Board.Rank(board.State.EnPassantTarget) == 4)
          {
            m_key ^= ZobristValues.Keys[1549 + Board.File(board.State.EnPassantTarget)];
            m_lock ^= ZobristValues.Locks[1549 + Board.File(board.State.EnPassantTarget)];
          }
        }
      }
    }

    /// <summary>
    /// XOR's piece square combination into the Zobrist hash. This will either place or remove
    /// corrosponding piece from the key.
    /// </summary>
    /// <param name="piece">The piece to add/remove to/from the key</param>
    /// <param name="square">The square the piece is placed/removed to/from.</param>
    public void HashFlipPieceSquare(Piece piece, Square square)
    {
      m_key ^= ZobristValues.Keys[((int)piece * 128) + (int)square];
      m_lock ^= ZobristValues.Locks[((int)piece * 128) + (int)square];
    }

    /// <summary>
    /// XOR's the color to play into the Zobrist hash. This will switch the current
    /// player in the key.
    /// </summary>
    public void HashFlipColorToPlay()
    {
      m_key ^= ZobristValues.Keys[1536];
      m_lock ^= ZobristValues.Locks[1536];
    }

    /// <summary>
    /// XOR's if white can castle long into the Zobrist hash.
    /// </summary>
    public void HashFlipWhiteCanCastleLong()
    {
      m_key ^= ZobristValues.Keys[1537];
      m_lock ^= ZobristValues.Locks[1537];
    }


    /// <summary>
    /// XOR's if white can castle short into the Zobrist hash.
    /// </summary>
    public void HashFlipWhiteCanCastleShort()
    {
      m_key ^= ZobristValues.Keys[1538];
      m_lock ^= ZobristValues.Locks[1538];
    }


    /// <summary>
    /// XOR's if black can castle long into the Zobrist hash.
    /// </summary>
    public void HashFlipBlackCanCastleLong()
    {
      m_key ^= ZobristValues.Keys[1539];
      m_lock ^= ZobristValues.Locks[1539];
    }


    /// <summary>
    /// XOR's if black can castle short into the Zobrist hash.
    /// </summary>
    public void HashFlipBlackCanCastleShort()
    {
      m_key ^= ZobristValues.Keys[1540];
      m_lock ^= ZobristValues.Locks[1540];
    }


    /// <summary>
    /// XOR's an En-Passant target into the Zobrist key.
    /// </summary>
    public void HashFlipEnPassantTarget(Square square)
    {
      if (Board.Rank(square) == 3)
      {
        m_key ^= ZobristValues.Keys[1541 + Board.File(square)];
        m_lock ^= ZobristValues.Locks[1541 + Board.File(square)];
      }

      if (Board.Rank(square) == 4)
      {
        m_key ^= ZobristValues.Keys[1549 + Board.File(square)];
        m_lock ^= ZobristValues.Locks[1549 + Board.File(square)];
      }
    }
  }
}
